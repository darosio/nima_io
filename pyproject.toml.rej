diff a/pyproject.toml b/pyproject.toml	(rejected hunks)
@@ -1,11 +1,9 @@
 [build-system]
 build-backend = "hatchling.build"
-requires = ["hatchling", "pdm-pep517"]
+requires = ["hatchling"]
 
 [project]
-authors = [
-  {name = 'Daniele Arosio', email = 'darosio@duck.com'}
-]
+authors = [{ name = 'Daniele Arosio', email = 'darosio@duck.com' }]
 classifiers = [
   "Environment :: Console",
   "Operating System :: OS Independent",
@@ -15,24 +13,10 @@ classifiers = [
   "Programming Language :: Unix Shell",
   "Intended Audience :: Science/Research",
   "Topic :: Scientific/Engineering",
-  "Development Status :: 3 - Alpha"
+  "Development Status :: 3 - Alpha",
 ]
 dependencies = [
-  "bioio-bioformats <= 1.0.0",
-  "click <= 8.1.8",
-  "dask-image <= 2024.5.3",
-  "lmfit <= 1.3.2",
-  "matplotlib <= 3.10.0",
-  "numpy <= 2.2.2",
-  "pandas <= 2.2.3",
-  "pyarrow <= 19.0.0",
-  "readlif <= 0.6.5",
-  "scikit-image <= 0.25.1",
-  "scipy <= 1.15.1",
-  "scyjava <= 1.10.1",
-  "seaborn <= 0.13.2",
-  "tifffile <= 2025.1.10",
-  "zarr <= 3.0.1"
+  "click>=8.3.0",
 ]
 description = "A project to read microscopy files."
 keywords = ["ADD_FIRST", "ADD_SECOND"]
@@ -42,37 +26,42 @@ readme = "README.md"
 requires-python = ">=3.11"
 version = "0.3.12"
 
-[project.optional-dependencies]
+[dependency-groups]
 dev = [
-  "commitizen <= 4.1.1",
-  "ipykernel <= 6.29.5",
-  "ipython <= 8.31.0",
-  "jupyter <= 1.1.1",
-  "pre-commit <= 4.1.0",
-  "pylsp-mypy <= 0.7.0",
-  "ruff <= 0.9.3",
-  "ruff-lsp == 0.0.60"
+  "git-cliff==2.10.0",
+  "mdformat==0.7.22",
+  "mdformat-gfm==0.4.1",
+  "pylsp-mypy==0.7.0",
+  "ruff==0.13.1",
+  "ruff-lsp==0.0.62",
 ]
 docs = [
-  "Sphinx <= 8.1.3",
-  "autodocsumm <= 0.2.14",
-  "nbsphinx <= 0.9.6",
-  "pydata-sphinx-theme <= 0.16.1",
-  "sphinx-click <= 6.0.0",
-  "sphinx_autodoc_typehints <= 3.0.1",
-  "sphinxcontrib-plantuml <= 0.30"
+  "autodocsumm==0.2.14",
+  "ipykernel==6.30.1",
+  "jupyter==1.1.1",
+  "nbsphinx==0.9.7",
+  "pydata-sphinx-theme==0.16.1",
+  "pygments==2.19.2",
+  "sphinx-autodoc-typehints<3.2", # TODO: wait nbsphinx
+  "sphinx-click==6.1.0",
+  "sphinx<8.2", # TODO: wait nbsphinx
+  "sphinxcontrib-plantuml==0.31",
+]
+lint = [
+  "pre-commit==4.3.0",
 ]
 tests = [
-  "Pygments <= 2.19.1",  # color xdoctest
-  "coverage[toml] <= 7.6.10",
-  "mypy <= 1.14.1",
-  "pandas-stubs <= 2.2.3.241126",
-  "pytest <= 8.3.4",
-  "types-click <= 7.1.8",
-  "xdoctest <= 1.2.0"
+  "coverage[toml]>=7.10.6",
+  "mypy>=1.18.2",
+  "pandas-stubs>=2.3.2.250827",
+  "pygments>=2.19.2", # color xdoctest
+  "pytest>=8.4.2",
+  "types-click >= 7.1.8",
+  "xdoctest>=1.3.0",
 ]
 
 [project.scripts]
+"nima_io" = "nima_io.__main__:nima_io"
 
 [project.urls]
 "Bug Tracker" = "https://github.com/darosio/nima_io/issues"
@@ -83,129 +72,31 @@ Documentation = "https://nima_io.readthedocs.io"
 Homepage = "https://github.com/darosio/nima_io"
 
 
-[tool.commitizen]
-name = "cz_customize"
-tag_format = "v$version"
-version = "0.0.1"
-version_files = [
-  "pyproject.toml:version",
-  "docs/conf.py:release",
-  "tests/test_cli.py:expected_version"
-]
-
-[tool.commitizen.customize]
-bump_map = {"^.+!:" = "MAJOR", "BREAKING CHANGE" = "MAJOR", "feat" = "MINOR", "fix" = "PATCH", "perf" = "PATCH", "refactor" = "PATCH"}
-bump_pattern = "^(BREAKING CHANGE|feat|fix|perf|refactor)"
-change_type_map = {"feat" = "Feat", "fix" = "Fix", "docs" = "Docs", "build" = "Build", "style" = "Style", "refactor" = "Refactor", "perf" = "Perf", "test" = "Test", "ci" = "CI/CD"}
-change_type_order = ["BREAKING CHANGE", "Feat", "Fix", "Docs", "Style", "Perf", "Test", "Build", "CI/CD"]
-changelog_pattern = "^(feat|fix|docs|style|refactor|perf|test|build|ci)?(\\(.*\\))?(!)?"
-commit_parser = "^(?P<change_type>feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(?:\\((?P<scope>[^()\r\n]*)\\)|\\()?(?P<breaking>!)?:\\s(?P<message>.*)?"
-example = """fix(parser): correct minor typos in code\n
-see the issue for details on the typos fixed\n
-closes issue #12
-"""
-info_path = "cz_customize_info.txt"
-message_template = "{{change_type}}:{% if show_message %} {{message}}{% endif %}"
-schema = """
-<type>(<scope>): <subject>
-<BLANK LINE>
-<body>
-<BLANK LINE>
-(BREAKING CHANGE: )<footer>
-"""
-schema_pattern = "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert|bump)(?:\\(([^()\r\n]*)\\)|\\()?(!)?:\\s(.*)?|^git-annex in"
-
-[[tool.commitizen.customize.questions]]
-choices = [
-  {value = "feat", name = "feat: A new feature. Correlates with MINOR in SemVer"},
-  {value = "fix", name = "fix: A bug fix. Correlates with PATCH in SemVer"},
-  {value = "perf", name = "perf: A code change that improves performance. Correlates with PATCH in SemVer"},
-  {value = "docs", name = "docs: Documentation only changes"},
-  {value = "style", name = "style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"},
-  {value = "refactor", name = "refactor: A code change that neither fixes a bug nor adds a feature"},
-  {value = "test", name = "test: Adding missing or correcting existing tests"},
-  {value = "build", name = "build: Changes that update the build system, development tools or external dependencies"},
-  {value = "ci", name = "ci: Changes to our CI configuration files and scripts (example scopes: GitLabCI)"},
-  {value = "revert", name = "revert: Reverting to previous commit(s)."}
-]
-message = "Select the type of change you are committing"
-name = "change_type"
-type = "list"
-
-[[tool.commitizen.customize.questions]]
-message = "Body."
-name = "message"
-type = "input"
-
-[[tool.commitizen.customize.questions]]
-message = "Do you want to add body message in commit?"
-name = "show_message"
-type = "confirm"
-
 [tool.coverage.paths]
 source = ["src", "*/site-packages"]
-tests = ["tests", "*/tests"]
 
 [tool.coverage.report]
 # fail_under = 100
 exclude_lines = [
-  "pragma: no cover"
+  "pragma: no cover",
+  "def __repr__",
+  "raise NotImplementedError",
+  "if __name__ == .__main__.:",
 ]
 show_missing = true
+skip_covered = true
 
 [tool.coverage.run]
 branch = true
 omit = ["*__init__.py"]
-source = ["nima_io", "tests"]
-
-[tool.hatch.envs.default]
-features = ["dev", "tests", "docs"]
-
-[tool.hatch.envs.default.scripts]
-# {args} e.g. "--increment PATCH"
-bump = [
-  "cz bump --major-version-zero -ch {args}",
-  "hatch build",
-  "export TEST_PYPI_TOKEN=$(pass show cloud/test_pypi | head -n 1) && hatch publish -r test -u __token__ -a $TEST_PYPI_TOKEN"
-]
-ch = "cz ch --incremental --unreleased-version HEAD"
-clean = "rm -rf ./build .coverage ./__pycache__ ./.mypy_cache ./.pytest_cache ./docs/_build ./tests/__pycache__ ./dist ./src/nima_io/__pycache__"
-docs = "sphinx-build docs docs/_build"
-docserve = "python -m http.server 8000 -d docs/_build"
-init = [
-  "pre-commit --version",
-  "pre-commit install",
-  "pre-commit install --hook-type commit-msg --hook-type pre-push"
-]
-lint = [
-  "pre-commit --version",
-  "pre-commit run --all-files --show-diff-on-failure {args}"  # No need for --hook-stage=manual
-]
-
-[tool.hatch.envs.tests]
-features = ["tests"]
-template = "tests"
-
-[[tool.hatch.envs.tests.matrix]]
-python = ["3.12", "3.11"]
-
-[tool.hatch.envs.tests.scripts]
-all = ["test", "type", "xdoc", "cov"]
-cov = [
-  "coverage combine",
-  "coverage report",
-  "coverage xml"
-]
-test = "coverage run -p -m pytest -v"
-type = "mypy src tests docs/conf.py"
-xdoc = "python -m xdoctest nima_io all"
+source = ["nima_io"]
 
 [tool.isort]
 combine_as_imports = true
 force_single_line = false
 include_trailing_comma = true
 known_first_party = "nima_io"
-line_length = 88  # to match black's default line length
+line_length = 88 # to match black's default line length
 multi_line_output = 3
 profile = "black"
 
@@ -221,8 +112,9 @@ strict = true
 warn_unreachable = true
 warn_unused_configs = true
 
-[tool.pdm]
-hatch_compat = true
+# TODO: check
+[tool.pydoclint]
+check-class-attributes = false
 
 [tool.pylsp-mypy]
 dmypy = false
@@ -231,11 +123,15 @@ live_mode = true
 strict = true
 
 [tool.ruff]
-extend-exclude = [""]
+extend-exclude = ["scripts/"]
 extend-include = ["*.ipynb"]
+fix = true
 force-exclude = true
 line-length = 88
-target-version = "py312"
+target-version = "py311"
+unsafe-fixes = true
+# Enable preview mode
+preview = false
 
 [tool.ruff.format]
 docstring-code-format = true
@@ -243,51 +139,62 @@ docstring-code-format = true
 [tool.ruff.lint]
 ignore = ["ISC001"]
 select = [
-  "A",  # builtins
-  "AIR",  # airflow
-  "ANN",  # typing annotation
-  "ARG",  # unused arguments
-  "B",  # bugbear
-  "BLE",  # blind-except
+  "A", # builtins
+  "AIR", # airflow
+  "ANN", # typing annotation
+  "ARG", # unused arguments
+  "ASYNC",
+  "B", # bugbear
+  "BLE", # blind-except
   "C",
-  "C4",  # comprehensions
-  "C90",  # mccabe
-  "D",  # pydocstyle
-  "DTZ",  # dates
-  "E",  # pycodestyle
-  "EM",  # exceptions
-  "ERA",  # eradicate
-  "F",  # pyflakes
-  "FBT",  # boolean-trap
-  "FLY",  # flyntp
-  "FURB",  # refurbishing and modernizing
-  "I",  # isort
-  "ICN",  # import conventions (opinionated)
-  "ISC",  # implicit-str-concat
-  "N",  # pep8-naming
+  "C4", # comprehensions
+  "C90", # mccabe
+  "D", # pydocstyle
+  "DOC",
+  "DTZ", # dates
+  "E", # pycodestyle
+  "EM", # exceptions
+  "ERA", # eradicate
+  "EXE",
+  "F", # pyflakes
+  "FA", # future annotations
+  "FBT", # boolean-trap
+  "FLY", # flyntp
+  "FURB", # refurbishing and modernizing
+  "G", # logging
+  "I", # isort
+  "ICN", # import conventions (opinionated)
+  "INP", #inplict namespace
+  "INT", #gettext
+  "ISC", # implicit-str-concat
+  "LOG", # logging
+  "N", # pep8-naming
   "NPY",
-  "PD",  # pandas-vet
-  "PERF",  # pperformance anti pattern
-  "PGH",  # pygrep WAIT
-  "PL",  # pylint see PLR2004...
-  "PT",  # pytest-style
-  "PTH",  # use-pathlib
-  "Q",  # quotes
-  "RET",  # Return
-  "RSE",  # Raise
-  "RUF",  # Ruff
-  "S",  # bandit XXX
-  "SIM",  # simplify
-  "SLF",  # private self
-  "SLOT",  # __slot__
-  "TCH",  # TYPE_CHECKING
-  "TD",  # TODOs
-  "FIX",  # no fixme
-  "TID",  # tidy-imports
-  "TRY",  # tryceratops
-  "UP",  # pyupgrade
-  "W",  # pycodestyle
-  "YTT"  # 2020
+  "PD", # pandas-vet
+  "PERF", # pperformance anti pattern
+  "PGH", # pygrep WAIT
+  "PIE",
+  "PL", # pylint see PLR2004...
+  "PT", # pytest-style
+  "PTH", # use-pathlib
+  "PYI", #lint typeshed
+  "Q", # quotes
+  "RET", # Return
+  "RSE", # Raise
+  "RUF", # Ruff
+  "S", # bandit
+  "SIM", # simplify
+  "SLF", # private self
+  "SLOT", # __slot__
+  "T10", # debugger
+  "T20", # print
+  "TC", # TYPE_CHECKING
+  "TCH", # TYPE_CHECKING
+  "TID", # tidy-imports
+  "TRY", # tryceratops
+  "UP", # pyupgrade
+  "W", # pycodestyle
+  "YTT", # 2020
 ]
 isort.combine-as-imports = true
 isort.force-single-line = false
@@ -296,12 +203,9 @@ isort.split-on-trailing-comma = true
 mccabe.max-complexity = 12
 
 [tool.ruff.lint.per-file-ignores]
-"*.ipynb" = ["ERA"]
-"__init__.py" = ["I002"]  # don't need annotations
-"tests/*" = [
-  "PLR2004",
-  "S101"
-]
+"*.ipynb" = ["ERA", "T20"]
+"__init__.py" = ["I002"] # don't need annotations
+"tests/*" = ["PLR2004", "S101"]
 
 [tool.ruff.lint.pydocstyle]
 convention = "numpy"
